# reasons you might want to use `environment.yaml` instead of `requirements.txt`:
# - pip installs packages in a loop, without ensuring dependencies across all packages
#   are fulfilled simultaneously, but conda achieves proper dependency control across
#   all packages
# - conda allows for installing packages without requiring certain compilers or
#   libraries to be available in the system, since it installs precompiled binaries

name: deepchopper

channels:
  - pytorch
  - conda-forge
  - defaults

# it is strongly recommended to specify versions of packages installed through conda
# to avoid situation when version-unspecified packages install their latest major
# versions which can sometimes break things

# current approach below keeps the dependencies in the same major versions across all
# users, but allows for different minor and patch versions of packages where backwards
# compatibility is usually guaranteed

dependencies:
  - python>=3.10
  - pip
  - pytorch>=2.1.0
  - torchvision
  - torchaudio
  - pytorch-lightning>=2.1.2
  - torchmetrics>=1.2.0
  - rich>=13.7.0
  - transformers>=4.37.2
  - safetensors>=0.4.2
  - datasets>=2.17.1
  - evaluate>=0.4.1
  - typer>=0.12.0
  - scikit-learn>=1.5.2
  - hydra-core>=1.3.2
  - omegaconf>=2.3.0
  - rust
  - pip:
    - gradio==5.0.1
    - fastapi==0.112.2
    - deepchopper-cli>=1.0.1
    - maturin>=1.2.1,<2

  # --------- loggers --------- #
  # - wandb
  # - neptune-client
  # - mlflow
  # - comet-ml
  # - aim>=3.16.2 # no lower than 3.16.2, see https://github.com/aimhubio/aim/issues/2550