[build-system]
requires = ["maturin>=1.2.1,<2"]
build-backend = "maturin"

[tool.maturin]


[tool.poetry]
authors = ["Yangyang Li <yangyang.li@northwestern.edu>"]
license = "GNUv3"
name = "deepchopper"
version = "0.1.0"
description = "deep learning adapter chopper for ont direct-rna data"
readme = "README.md"


[project]
name = "deepchopper"
description = "deep learning adapter chopper for ont direct-rna data"
authors = [{ name = "Yangyang Li", email = "<yangyang.li@northwestern.edu>" }]
readme = "README.md"
requires-python = ">=3.10"
license = { file = "LICENSE" }
keywords = ["deep learning", "bioinformatics", "rust"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNUv3 License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Rust",
    "Topic :: Scientific/Engineering",
]

[tool.poetry.scripts]
dc-train = "deepchopper.train:main"
dc-eval = "deepchopper.eval:main"

[tool.poe.tasks.train]
cmd = "dc-train"
env = { DC_CONFIG_PATH = "${POE_PWD}/configs" }

[tool.poe.tasks.eval]
cmd = "dc-eval"
env = { DC_CONFIG_PATH = "${POE_PWD}/configs" }

[tool.poetry.dependencies]
python = "^3.10, <3.12"
torch = [
    { version = "^2.1.0+cu118", source = "pytorch", markers = "sys_platform == 'linux'" },
    { version = "^2.1.0", source = "PyPI", markers = "sys_platform == 'darwin'" },
]
lightning = "^2.1.2"
torchmetrics = "^1.2.0"
rich = "^13.7.0"
wandb = "^0.16.0"
omegaconf = "^2.3.0"
hydra-core = "^1.3.2"
hydra-colorlog = "^1.2.0"
hydra-optuna-sweeper = "^1.2.0"
scipy = "1.11.3"
transformers = "^4.37.2"
safetensors = "^0.4.2"
pyarrow = "^15.0.0"
pandas = "^2.2.0"

[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cu118"
priority = "explicit"

[[tool.poetry.source]]
name = "PyPI"
priority = "primary"

[tool.poetry.group.dev.dependencies]
pytest-sugar = "^0.9.7"
pytest = "^7.4.3"
ruff = "^0.1.3"
ipdb = "^0.13.13"
setuptools = "^68.2.2"
distribute = "^0.7.3"
interrogate = "^1.5.0"
maturin = "^1.3.2"
nvitop = "^1.3.1"
poethepoet = "^0.24.3"
pynvim = "^0.5.0"
invoke = "^2.2.0"
patchelf = { version = "^0.17.2.1", markers = "sys_platform == 'linux'" }


[project.urls]
homepage = "https://github.com/ylab-hi/DeepChopper"
documentation = "https://github.com/ylab-hi/DeepChopper"
repository = "https://github.com/ylab-hi/DeepChopper"
changelog = "https://github.com/ylab-hi/DeepChopper/README.md"

[tool.ruff]
target-version = "py310"
line-length = 120
fix = true
fixable = ["ALL"]
select = [
    "ANN",
    "D",
    "A",
    "F",
    "E",
    "W",
    "C90",
    "I",
    "UP",
    "N",
    "YTT",
    "TID",
    "S",
    "BLE",
    "FBT",
    "PLR",
    "B",
    "B9",
    "A",
    "C4",
    "T10",
    "EM",
    "ICN",
    "T20",
    "Q",
    "RET",
    "SIM",
    "ARG",
    "DTZ",
    "ERA",
    "PD",
    "PGH",
    "PLC",
    "PLE",
    "PLW",
    "RUF",
    "PL",
    "TD",
    "FIX",
    "PTH",
    "TCH",
    "SLOT",
    "PT",
    "PYI",
    "PIE",
    "ISC",
    "FA",
    "EXE",
    # "CPY",
    "COM",
]
ignore = [
    "E501",
    "D203",
    "D100",
    "D401",
    "ANN101",
    "ANN102",
    "ANN001",
    "ANN002",
    "ANN003",
    "ANN201",
    "ANN202",
    "ANN204",
    "ANN205",
    "ANN206",
    "PGH003",
    "N802",
    "N803",
    "N806",
    "N815",
    "EM101",
    # formater conflict
    'COM812',
    'COM819',
    'D206',
    'ISC001',
    'Q000',
    'Q001',
    'Q002',
    'Q003',
    'W191',
]
exclude = [
    "tests/*",
    "scripts/*",
    "docs/conf.py",

    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",

]


[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
# magic-trailing-comma = "respect"
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.flake8-bugbear]
extend-immutable-calls = ["typer.Argument", "typer.Option"]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.per-file-ignores]
"deepchopper/data/mnist_datamodule.py" = ["ARG002", "PLR0913", "D205", "D402"]
"deepchopper/models/mnist_module.py" = ["ARG002", "A002"]
"deepchopper/utils/pylogger.py" = ["D205", "PLR5501", "SIM114"]
"deepchopper/models/components/simple_dense_net.py" = ["ARG002", "PLR0913"]
"deepchopper/eval.py" = ["S101"]

[tool.ruff.pydocstyle]
convention = 'google'

[tool.coverage.paths]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["deepchopper"]
omit = ["tests/*"]

[tool.coverage.report]
show_missing = true
fail_under = 40
ignore_errors = true
exclude_lines = [
    "pragma: nocover",
    "raise NotImplementedError",
    "raise NotImplementedError()",
    "if __name__ == .__main__.:",
]

[tool.mypy]
strict = false
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = "tests/"
log_cli = "True"
filterwarnings = ["ignore::DeprecationWarning", "ignore::UserWarning"]
markers = [
    "smoke: a quick smoke test",
    "failing: failing tests",
    "imports: importing tests",
    "slow: slow tests",
]
addopts = [
    "--color=yes",
    "--durations=0",
    "--strict-markers",
    "--doctest-modules",
    "--import-mode=importlib",
]
